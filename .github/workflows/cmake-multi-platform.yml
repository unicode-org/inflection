#Testing

name: CMake on Multiple Platforms

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'inflection/**'
      - '.github/workflows/**'
      - '!data/**'
      - '!documents/**'
      - '!fst/**'
  push:
    branches:
      - main
    paths:
      - 'inflection/**'
      - '.github/workflows/**'

env:
  ICU_MAJOR: '77'
  ICU_MINOR: '1'

jobs:
  cache-icu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ~/icu
          key: ${{ runner.os }}-icu-${ICU_MAJOR}-${ICU_MINOR}

      - name: Download and install ICU (Ubuntu binary)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/unicode-org/icu/releases/download/release-${ICU_MAJOR}-${ICU_MINOR}/icu4c-${ICU_MAJOR}_${ICU_MINOR}-Ubuntu22.04-x64.tgz
          mkdir -p ~/icu
          mv icu4c-${ICU_MAJOR}_${ICU_MINOR}-Ubuntu22.04-x64.tgz ~/icu/
          cd ~/icu
          tar xvfz *.tgz
          rm *.tgz

      - uses: actions/cache/save@v4
        with:
          path: ~/icu
          key: ${{ runner.os }}-icu-${ICU_MAJOR}-${ICU_MINOR}

  build:
    needs: cache-icu
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: ubuntu-latest
            cpp_compiler: clang++
          - os: macos-latest
            cpp_compiler: clang++

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Git LFS
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y git-lfs
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install git-lfs
          fi
          git lfs install

      - name: Pull LFS content
        run: git lfs pull

      - name: Debug LFS directory
        run: ls -lhR inflection/resources/org/unicode/inflection/dictionary || true

      - name: Fetch Git tags (for versioning)
        run: git fetch --tags

      - name: Set build paths
        id: paths
        shell: bash
        run: |
          echo "project_root=${{ github.workspace }}/inflection" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/inflection/build" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v4
        with:
          path: ~/icu
          key: ${{ runner.os }}-icu-${ICU_MAJOR}-${ICU_MINOR}

      - name: Install ICU
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "ICU_ROOT=$HOME/icu/icu/usr/local" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew list icu4c || brew install icu4c
            ICU_PREFIX=$(brew --prefix icu4c)
            echo "ICU_ROOT=$ICU_PREFIX" >> $GITHUB_ENV
            echo "CMAKE_INCLUDE_PATH=$ICU_PREFIX/include" >> $GITHUB_ENV
            echo "CMAKE_LIBRARY_PATH=$ICU_PREFIX/lib" >> $GITHUB_ENV
            echo "PATH=$ICU_PREFIX/bin:$PATH" >> $GITHUB_ENV
            echo "LDFLAGS=-L$ICU_PREFIX/lib" >> $GITHUB_ENV
            echo "CPPFLAGS=-I$ICU_PREFIX/include" >> $GITHUB_ENV
          fi

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.paths.outputs.build_dir }}
          -S ${{ steps.paths.outputs.project_root }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_PREFIX_PATH=$ICU_ROOT
          -DICU_ROOT=$ICU_ROOT

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu

      - name: Build
        run: |
          cmake --build ${{ steps.paths.outputs.build_dir }} --config ${{ matrix.build_type }} -j${{ steps.cpu.outputs.count }}

      - name: Run tests
        working-directory: ${{ steps.paths.outputs.build_dir }}
        run: ctest --output-on-failure -C ${{ matrix.build_type }}

      - name: Package with CPack
        working-directory: ${{ steps.paths.outputs.build_dir }}
        run: |
          cpack
          ls -lh *.deb *.tar.gz || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            ${{ steps.paths.outputs.build_dir }}/*.deb
            ${{ steps.paths.outputs.build_dir }}/*.tar.gz
          retention-days: 30

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "Release ${{ github.ref_name }}"
          files: |
            ${{ steps.paths.outputs.build_dir }}/*.deb
            ${{ steps.paths.outputs.build_dir }}/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

