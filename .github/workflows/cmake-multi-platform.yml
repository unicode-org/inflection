# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  # Keep it for manual runs.
  workflow_dispatch:
  # Run it on all branches but ignore some paths.
  pull_request:
    paths:
    - 'inflection/**'
    - '!data/**'
    - '!documents/**'
    - '!fst/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [clang]
        # All [OS x compiler] items should be covered in include/exclude sections.
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          
          # Added macOS and Windows support installation media
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: 'true'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "project-root-dir=${{ github.workspace }}/inflection" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}/inflection/build" >> "$GITHUB_OUTPUT"

    - name: Set Up MSVC (Windows Only)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ steps.strings.outputs.project-root-dir }}

        # To check if it is windows or not
        ${{ matrix.os == 'windows-latest' && '-G "Visual Studio 17 2022"' || '' }}

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j ${{ steps.cpu-cores.outputs.count }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cmake --build . -t check -j ${{ steps.cpu-cores.outputs.count }}
